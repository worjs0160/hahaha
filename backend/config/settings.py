"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-eq%t08wr+7@adk*_*ezp11tnwix2skgq+kp4e19l1-t1*u0r54"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost','127.0.0.1','54.180.178.255',]


# Application definition
CUSTOM_APPS = [
    "core.apps.CoreConfig", # core 앱
    "users.apps.UsersConfig",  # users 앱
    "attendances.apps.AttendancesConfig",  # attendance 앱
    "messengers.apps.MessengersConfig", # messngers 앱
    "datasets.apps.DatasetsConfig",  # datasets 앱
    "trainings.apps.TrainingsConfig", # trainings 앱
    "calendars.apps.CalendarsConfig", # calendars 앱
    "consultings.apps.ConsultingsConfig", #consultings 앱 
    "approvals.apps.ApprovalsConfig", #approvals 앱 
]

THIRD_PARTY_APPS = [
    "rest_framework",  # REST Framework 앱
    "corsheaders",  # cors 사용 앱
    "django_seed", # 가짜 데이터 생성 앱
    "django_filters", # API 필터 사용 앱
]

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",  # static 파일 사용하기 위한 앱
]

INSTALLED_APPS = CUSTOM_APPS + DJANGO_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # django cors 사용
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# AbstractUser 이용하여 커스텀한 유저 모델 등록
AUTH_USER_MODEL = "users.User"


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images), 정적파일 설정
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# 미디어 파일 설정
MEDIA_URL = "/media/"  # 미디어 파일에 접근하는 URL
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # 실제 파일 위치하는 서버상 경로

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS 설정
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    "http://localhost:8080",  # vue의 포트 번호
    "http://localhost:3000",  # vue의 포트 번호
    "http://127.0.0.1:8080",
    "http://127.0.0.1:3000",
)

# REST JWT 사용설정
REST_FRAMEWORK = {
    # 로그인 여부 확인하는 클래스
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    # 로그인과 관련된 클래스에 JWT사용
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# JWT 옵션 설정
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1),  # 액세스 토큰 유효기간 설정
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=20),  # 리프레시 토큰 유효기간 설정
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,  # 비밀키 설정(장고와 같은 비밀키므로 변경 필요)
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("JWT",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
}

# JWT 사용 여부 설정
REST_USE_JWT = True

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ]
}

# logging
# LOGGING = {
#     'version': 1,
#     # 기존의 로깅 설정을 비활성화 할 것인가?
#     'disable_existing_loggers': False,

#     # 포맷터
#     # 로그 레코드는 최종적으로 텍스트로 표현됨
#     # 이 텍스트의 포맷 형식 정의
#     # 여러 포맷 정의 가능
#     'formatters': {
#         'verbose': {
#             'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
#             'datefmt' : "%d/%b/%Y %H:%M:%S"
#         },
#         'simple': {
#             'format': '%(levelname)s %(message)s'
#         },

#     },

#     # 핸들러
#     # 로그 레코드로 무슨 작업을 할 것인지 정의
#     # 여러 핸들러 정의 가능
#     'handlers': {
#         # 로그 파일을 만들어 텍스트로 로그레코드 저장
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/logfile'),
#             'formatter': 'verbose',
#         },
#     },

#     # 로거
#     # 로그 레코드 저장소
#     # 로거를 이름별로 정의
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'INFO', #레벨
#             'propagate': True,
#         },
#     },

# }
